  edit:
    description: "Edit existing bookmark"
    usage: "ubm edit"
    behavior: |
      1. Interactive selection of bookmark to edit
      2. Interactive editing of title, URL, and category
      3. Category change uses same interactive selection as move command
    interactive_flow:
      step1: "Select bookmark to edit"
      step2: "Choose what to edit (title/URL/category/all)"
      step3: "Make changes with appropriate prompts"
      step4: "Confirm changes"# ubm (URL Bookmark Manager) CLI Tool Specification

name: ubm
version: "1.0.0"
description: "Command-line URL bookmark manager with interactive directory navigation"
language: Go

## Core Features

features:
  - interactive_navigation: "Tree-like directory structure navigation"
  - url_management: "Add, edit, delete URL bookmarks"
  - browser_integration: "Open selected URLs in default browser"
  - data_persistence: "Store bookmarks in local file"

## Commands

commands:
  add:
    description: "Add a new URL bookmark with interactive category selection"
    usage: "ubm add [URL] [TITLE]"
    behavior: |
      1. Prompt for URL if not provided
      2. Auto-detect title from URL or prompt for custom title
      3. Interactive category selection (tree navigation)
      4. Option to create new category during selection
    options:
      - name: "--title, -t"
        description: "Custom title for the bookmark"
        required: false
        default: "Auto-detect from URL"
    examples:
      - "ubm add https://example.com"
      - "ubm add https://golang.org 'Go Programming Language'"
    interactive_flow:
      step1: "Enter URL (if not provided as argument)"
      step2: "Enter title (or use auto-detected title)"
      step3: "Select category from tree or create new one"
      step4: "Confirm and save bookmark"

  list:
    description: "Interactive navigation of bookmarked URLs"
    usage: "ubm list"
    behavior: |
      1. Display directory tree structure
      2. Allow user to navigate through categories
      3. Show bookmarks in selected category
      4. Open selected bookmark in browser
    navigation:
      - "Arrow keys: Navigate up/down"
      - "Enter: Select directory/bookmark"
      - "Backspace/Esc: Go back to parent directory"
      - "q: Quit"

  search:
    description: "Search bookmarks by title or URL"
    usage: "ubm search [QUERY]"
    options:
      - name: "--category, -c"
        description: "Search within specific category"
        required: false
    examples:
      - "ubm search 'golang'"
      - "ubm search 'string' --category 'programming'"

  show:
    description: "Display all bookmarks in tree format"
    usage: "ubm show"
    options:
      - name: "--flat, -f"
        description: "Show flat list instead of tree"
        required: false

  category:
    description: "Manage categories"
    subcommands:
      create:
        description: "Create new category interactively"
        usage: "ubm category create"
        behavior: |
          1. Display existing category tree
          2. Allow user to select parent category or create at root
          3. Prompt for new category name
          4. Create category structure
      list:
        description: "List all categories in tree format"
        usage: "ubm category list"
      delete:
        description: "Delete empty category"
        usage: "ubm category delete"
        behavior: "Interactive selection of category to delete (only if empty)"

  move:
    description: "Move bookmark to different category"
    usage: "ubm move"
    behavior: |
      1. Interactive selection of bookmark to move
      2. Display current category path
      3. Interactive selection of new category
      4. Option to create new category during selection
      5. Confirm and move bookmark
    examples:
      - "ubm move"
    interactive_flow:
      step1: "Select bookmark to move (from all bookmarks)"
      step2: "Show current category: programming/golang"
      step3: "Select new category or create new one"
      step4: "Confirm move operation"

  delete:
    description: "Delete bookmark"
    usage: "ubm delete [ID]"
    options:
      - name: "--confirm, -y"
        description: "Skip confirmation prompt"
        required: false

  import:
    description: "Import bookmarks from file"
    usage: "ubm import [FILE]"
    supported_formats:
      - "JSON"
      - "CSV"
      - "Browser bookmark HTML"

  export:
    description: "Export bookmarks to file"
    usage: "ubm export [FILE]"
    options:
      - name: "--format, -f"
        description: "Export format (json, csv, html)"
        default: "json"

## Data Structure

bookmark:
  fields:
    id: "string (UUID)"
    title: "string"
    url: "string (validated URL)"
    category: "string (slash-separated path)"
    created_at: "timestamp"
    updated_at: "timestamp"
    tags: "array of strings (optional)"
    description: "string (optional)"

storage:
  format: "JSON"
  location: "~/.config/ubm/bookmarks.json"
  backup: "~/.config/ubm/bookmarks.backup.json"

## Interactive Category Selection

category_selection:
  description: "Common interactive flow for category selection used in add/move/edit commands"
  flow:
    step1:
      display: |
        📁 Select Category:
        ├── 📁 programming (12 bookmarks)
        ├── 📁 work (8 bookmarks)
        ├── 📁 entertainment (5 bookmarks)
        ├── 📁 uncategorized (3 bookmarks)
        └── ➕ Create new category
      actions:
        - "Navigate with arrow keys"
        - "Enter to select or expand directory"
        - "Select '➕ Create new category' to create new one"
    
    step2_existing:
      display: |
        📁 programming:
        ├── 📁 golang (4 bookmarks)
        ├── 📁 python (6 bookmarks)
        ├── 📁 javascript (2 bookmarks)
        ├── ⬅️ Back to parent
        └── ➕ Create new subcategory
      action: "Select category or create new subcategory"
    
    step2_create:
      prompt: "Enter new category name:"
      validation: "No special characters except dash and underscore"
      confirmation: "Create category 'machine-learning' under 'programming'? (y/n)"

  features:
    - "Real-time bookmark count display"
    - "Breadcrumb navigation (programming > golang)"
    - "Create category at any level"
    - "Back navigation with visual indicator"

navigation_flow:
  step1:
    display: |
      📁 Categories:
      ├── 📁 programming
      ├── 📁 work
      ├── 📁 entertainment
      └── 📁 uncategorized
    action: "Select 'programming'"

  step2:
    display: |
      📁 programming:
      ├── 📁 golang
      ├── 📁 python
      ├── 📁 javascript
      └── 🔗 General Programming Resources (3)
    action: "Select 'golang'"

  step3:
    display: |
      🔗 golang bookmarks:
      ├── Goの文字列は不変
      ├── Go Concurrency Patterns
      ├── Effective Go
      └── Go by Example
    action: "Select 'Goの文字列は不変'"

  step4:
    action: "Open URL in default browser"
    message: "Opening: https://example.com/go-strings-immutable"

## Configuration

config:
  file: "~/.config/ubm/config.yaml"
  options:
    default_browser: "string (auto-detect if empty)"
    editor: "string (for editing descriptions)"
    display_format: "tree|flat"
    auto_backup: "boolean (default: true)"
    max_backups: "integer (default: 5)"

## Error Handling

errors:
  invalid_url: "Validate URLs before saving"
  duplicate_bookmark: "Check for existing URLs in same category"
  missing_file: "Create config directory and files if not exist"
  browser_not_found: "Fallback to system default or show URL"
  network_error: "Handle URL validation failures gracefully"

## Dependencies

go_modules:
  - "github.com/spf13/cobra" # CLI framework
  - "github.com/manifoldco/promptui" # Interactive prompts
  - "github.com/pkg/browser" # Browser opening
  - "gopkg.in/yaml.v3" # YAML parsing
  - "github.com/google/uuid" # UUID generation

## Build & Distribution

build:
  targets:
    - "linux/amd64"
    - "darwin/amd64"
    - "darwin/arm64"
    - "windows/amd64"
  
installation:
  methods:
    - "go install github.com/username/ubm@latest"
    - "Download binary from releases"
    - "Package managers (brew, apt, etc.)"

## Testing

test_coverage:
  - "Unit tests for core functionality"
  - "Integration tests for file operations"
  - "CLI interaction tests"
  - "Cross-platform compatibility tests"